CREATE TABLE IF NOT EXISTS backend.location_group
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY
        CONSTRAINT pk_location_group
            PRIMARY KEY NOT NULL UNIQUE,
    uuid UUID NOT NULL UNIQUE,
    group_name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT now() NOT NULL,
    updated_at TIMESTAMP DEFAULT NULL
);

ALTER TABLE backend.location_group OWNER TO postgres;

CREATE TABLE IF NOT EXISTS backend.location
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY
        CONSTRAINT pk_location
            PRIMARY KEY NOT NULL UNIQUE,
    uuid UUID NOT NULL UNIQUE,
    location_name VARCHAR(255) NOT NULL,
    location_group_id INTEGER NOT NULL
        CONSTRAINT fk_location_location_group
            REFERENCES backend.location_group,
    created_at TIMESTAMP DEFAULT now() NOT NULL,
    updated_at TIMESTAMP DEFAULT NULL
);
ALTER TABLE backend.location OWNER TO postgres;


CREATE TABLE IF NOT EXISTS backend.device
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY
        CONSTRAINT pk_device
            PRIMARY KEY NOT NULL UNIQUE,
    uuid UUID NOT NULL UNIQUE,
    device_id VARCHAR(255) NOT NULL UNIQUE,
    type VARCHAR(255) NOT NULL,
    location_id INTEGER NOT NULL
        CONSTRAINT fk_device_location
            REFERENCES backend.location,
    created_at TIMESTAMP DEFAULT now() NOT NULL,
    updated_at TIMESTAMP DEFAULT NULL
);

ALTER TABLE backend.device OWNER TO postgres;

CREATE INDEX ix_device_device_id
                       ON backend.device (device_id);

CREATE TABLE IF NOT EXISTS backend.temp_history
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY
        CONSTRAINT pk_temp_history
            PRIMARY KEY NOT NULL UNIQUE,
    uuid UUID NOT NULL UNIQUE,
    temp INTEGER NOT NULL,
    device_id INTEGER NOT NULL
        CONSTRAINT fk_temp_history_device
            REFERENCES backend.device,
    get_at TIMESTAMP DEFAULT now() NOT NULL,
    updated_at TIMESTAMP DEFAULT NULL
);

ALTER TABLE backend.temp_history OWNER TO postgres;

CREATE TABLE IF NOT EXISTS backend.users
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY
        CONSTRAINT pk_users
            PRIMARY KEY NOT NULL UNIQUE,
    uuid UUID NOT NULL UNIQUE,
    login VARCHAR(255) UNIQUE,
    password VARCHAR(255) NOT NULL,
    level INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT now() NOT NULL,
    updated_at TIMESTAMP DEFAULT NULL
);

ALTER TABLE backend.users OWNER TO postgres;

CREATE TABLE IF NOT EXISTS backend.user_location
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY
        CONSTRAINT pk_user_location
            PRIMARY KEY NOT NULL UNIQUE,
    uuid UUID NOT NULL UNIQUE,
    user_id INTEGER NOT NULL
        CONSTRAINT fk_user_user_location
            REFERENCES backend.users,
    location_id INTEGER NOT NULL
        CONSTRAINT fk_location_user_location
            REFERENCES backend.location,
    permission_level INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT now() NOT NULL,
    updated_at TIMESTAMP DEFAULT NULL
);

ALTER TABLE backend.user_location OWNER TO postgres;

CREATE TABLE IF NOT EXISTS backend.user_location_group
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY
        CONSTRAINT pk_user_location_group
            PRIMARY KEY NOT NULL UNIQUE,
    uuid UUID NOT NULL UNIQUE,
    user_id INTEGER NOT NULL
        CONSTRAINT fk_user_user_location_group
            REFERENCES backend.users,
    location_group_id INTEGER NOT NULL
        CONSTRAINT fk_location_user_location_group
            REFERENCES backend.location_group,
    permission_level INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT now() NOT NULL,
    updated_at TIMESTAMP DEFAULT NULL
);

ALTER TABLE backend.user_location_group OWNER TO postgres;

CREATE TABLE IF NOT EXISTS backend.connected_users
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY
        CONSTRAINT pk_connected_users
            PRIMARY KEY NOT NULL UNIQUE,
    uuid UUID NOT NULL UNIQUE,
    user_1_id INTEGER NOT NULL
        CONSTRAINT fk_user_1_connected_users
            REFERENCES backend.users,
    user_2_id INTEGER NOT NULL
        CONSTRAINT fk_user_2_connected_users
            REFERENCES backend.users,
    created_at TIMESTAMP DEFAULT now() NOT NULL,
    updated_at TIMESTAMP DEFAULT NULL
);

ALTER TABLE backend.connected_users OWNER TO postgres;

